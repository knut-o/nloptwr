name: CMake

on:
  label:
    types:
      - opened
      - labeled
  push:
    branches: [ "main", "devel" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: Install NLOPT
      run: |
        echo "vcpkg install nlopt"
        vcpkg install nlopt
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        echo "Configure CMake"
        CMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
        echo "Configure CMake completed?"

    - name: Build
      # Build your program with the given configuration
      run: |
           echo "Find nlopt.hpp"
           # find / -type f -iname nlopt.hpp 2> /dev/null
           echo "TODO: Build"
           cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#        cd --build ${{github.workspace}}/build
#        cmake .. 

    - name: Test
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        mkdir -p ${{github.workspace}}/build
        cd       ${{github.workspace}}/build
        ctest -C ${{env.BUILD_TYPE}}
#
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y rpm graphviz doxygen
        mkdir -p ${{github.workspace}}/build 
    
    - name: Create packages
      run: |    
        cd  ${{github.workspace}}/build
        cpack
        
    - name: List content of package
      run: |    
        cd  ${{github.workspace}}/build
        ls -l *.deb
        dpkg -c ./*.deb

    - name: Install package
      run: |    
        cd  ${{github.workspace}}/build
        sudo dpkg -i ./*.deb

